name: CI/CD Pipeline

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create Angular environment files
        run: |
          mkdir -p apps/cockpit-app/src/environments
          cat > apps/cockpit-app/src/environments/environment.production.ts << EOL
          export const environment = {
            production: true,
            apiUrl: '${{ secrets.API_URL || 'http://localhost:8000' }}',
          };
          EOL

      - name: Build
        run: npm run build -- cockpit-app --configuration=production

      # - name: Test
      #   run: npm run test -- cockpit-app --watch=false

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Cloudflared
        run: |
          sudo mkdir -p --mode=0755 /usr/share/keyrings
          curl -fsSL https://pkg.cloudflare.com/cloudflare-main.gpg | sudo tee /usr/share/keyrings/cloudflare-main.gpg >/dev/null
          echo 'deb [signed-by=/usr/share/keyrings/cloudflare-main.gpg] https://pkg.cloudflare.com/cloudflared jammy main' | sudo tee /etc/apt/sources.list.d/cloudflared.list
          sudo apt-get update && sudo apt-get install cloudflared

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.RASPBERRY_PI_SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" > ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
          cat <<EOF > ~/.ssh/config
          Host ${{ secrets.CLOUDFLARE_TUNNEL_DOMAIN }}
            User ${{ secrets.RASPBERRY_PI_USERNAME }}
            IdentityFile ~/.ssh/id_ed25519
            ProxyCommand cloudflared access ssh --hostname %h
          EOF
          chmod 600 ~/.ssh/config
        shell: bash

      - name: Deploy via SSH
        run: |
          ssh -vvv -o StrictHostKeyChecking=no ${{ secrets.CLOUDFLARE_TUNNEL_DOMAIN }} "\
            eval \"\$(ssh-agent -s)\" && \
            ssh-add ~/.ssh/github && \
            cd ~/cockpit-app && \
            git pull && \
            mkdir -p apps/cockpit-app/src/environments && \

            # Create the environment file for cockpit-app production
            cat > apps/cockpit-app/src/environments/environment.production.ts << 'EOL'
            export const environment = {
              production: true,
              apiUrl: '${{ secrets.API_URL || 'http://localhost:8000' }}',
            };
            EOL
            docker compose down && docker compose up -d --build"

        shell: bash
